{"version":3,"sources":["components/InputFields.js","components/ConsolidatedCards.js","components/Chart.js","components/ListExpense.js","App.js","serviceWorker.js","index.js"],"names":["InputFields","props","useState","desc","setDesc","value","setValue","type","setType","className","TextField","variant","size","id","select","onChange","e","target","MenuItem","key","label","Button","onClick","document","getElementById","focus","click","ConsolidatedCards","Card","Typography","color","gutterBottom","title","component","style","netAmount","Chart","state","labels","datasets","backgroundColor","colors","hoverBackgroundColor","data","values","options","display","text","fontSize","legend","position","ListExpense","initialList","setInitiallist","setLabels","setColors","setValues","labelsexpense","setLabelsexpense","colorsexpense","setColorsexpense","valuesexpense","setValuesexpense","netIncome","netExpense","setColor","parseInt","temp","tempColor","Math","floor","random","length","oldArray","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","index","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e3c0422.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\nimport \"./InputFields.css\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nexport default function InputFields(props) {\n  const [desc, setDesc] = useState(\"\");\n  const [value, setValue] = useState(\"\");\n  const [type, setType] = useState(\"+\");\n\n  function handleClick() {\n    if (!emptyCheck()) {\n      clearll();\n      document.getElementById(\"desc\").focus();\n      props.click([desc, value, type]);\n    }\n  }\n  function emptyCheck() {\n    if (desc && value && type) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  function clearll() {\n    setDesc(\"\");\n    setValue(\"\");\n  }\n  return (\n    <div className=\"mb\">\n      <div className=\"inline-comp\">\n        <TextField\n          variant=\"outlined\"\n          size=\"small\"\n          id=\"standard-select-currency\"\n          select\n          value={type}\n          onChange={(e) => setType(e.target.value)}\n        >\n          <MenuItem key=\"+\" value=\"+\">\n            +\n          </MenuItem>\n          <MenuItem key=\"-\" value=\"-\">\n            -\n          </MenuItem>\n        </TextField>\n      </div>\n      <div className=\"inline-comp pf\">\n        <TextField\n          className=\"inline-comp\"\n          variant=\"outlined\"\n          label=\"Description\"\n          id=\"desc\"\n          value={desc}\n          size=\"small\"\n          onChange={(e) => setDesc(e.target.value)}\n        ></TextField>\n      </div>\n      <div className=\"inline-comp pf\">\n        <TextField\n          type=\"number\"\n          className=\"field-width-value\"\n          variant=\"outlined\"\n          label=\"â‚¹\"\n          value={value}\n          size=\"small\"\n          onChange={(e) => setValue(e.target.value)}\n        ></TextField>\n      </div>\n      <div className=\"inline-comp position-last pf\">\n        <Button onClick={handleClick}>\n          <CheckCircleOutlineIcon className=\"padding-comp\"></CheckCircleOutlineIcon>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { Card, Typography } from \"@material-ui/core\";\n\nexport default function ConsolidatedCards(props) {\n  return (\n    <Card className=\"card-dim inline-comp\">\n      <Typography\n        className=\"typo-dim\"\n        color=\"textSecondary\"\n        gutterBottom\n      >\n        {props.title}\n      </Typography>\n      <Typography\n        className=\"typo-dim\"\n        color=\"textSecondary\"\n        variant=\"h4\"\n        component=\"h2\"\n        style={{ color: `${props.color}` }}\n      >\n        {props.netAmount}\n      </Typography>\n    </Card>\n  );\n}\n","import { Doughnut } from \"react-chartjs-2\";\nimport React from \"react\";\n\nexport default function Chart(props) {\n  const state = {\n    labels: props.labels,\n    datasets: [\n      {\n        label: \"Expense\",\n        backgroundColor: props.colors,\n        hoverBackgroundColor: [],\n        data: props.values,\n      },\n    ],\n  };\n  return (\n    <div>\n      <Doughnut\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text: props.title,\n            fontSize: 20,\n          },\n          legend: {\n            display: true,\n            position: \"right\",\n          },\n        }}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport InputFields from \"./InputFields\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport \"../App.css\";\nimport ConsolidatedCards from \"./ConsolidatedCards\";\nimport Chart from \"./Chart\";\n\nfunction ListExpense(props) {\n  const [initialList, setInitiallist] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [colors, setColors] = useState([]);\n  const [values, setValues] = useState([-1]);\n  const [labelsexpense, setLabelsexpense] = useState([]);\n  const [colorsexpense, setColorsexpense] = useState([]);\n  const [valuesexpense, setValuesexpense] = useState([-1]);\n  let netAmount = 0.0;\n  let netIncome = 0.0;\n  let netExpense = 0.0;\n\n  function handleClick(e) {\n    if (values[0] === -1 && e[2] === \"+\") {\n      setValues([]);\n    }\n    if (valuesexpense[0] === -1 && e[2] === \"-\") {\n      setValuesexpense([]);\n    }\n    var temp = [];\n    var tempColor =\n      \"rgb(\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \",\" +\n      Math.floor(Math.random() * 256) +\n      \")\";\n    temp = {\n      id: initialList.length + 1,\n      type: e[2],\n      value: e[1],\n      desc: e[0],\n    };\n    setInitiallist((oldArray) => [...oldArray, temp]);\n    if (e[2] === \"+\") {\n      setLabels((oldArray) => [...oldArray, e[0]]);\n      setValues((oldArray) => [...oldArray, e[1]]);\n      setColors((oldArray) => [...oldArray, tempColor]);\n    } else {\n      setLabelsexpense((oldArray) => [...oldArray, e[0]]);\n      setValuesexpense((oldArray) => [...oldArray, e[1]]);\n      setColorsexpense((oldArray) => [...oldArray, tempColor]);\n    }\n  }\n  function setColor(e) {\n    let color = \"\";\n    e.type === \"+\" ? (color = \"green\") : (color = \"red\");\n    e.type === \"+\"\n      ? (netAmount = netAmount + parseInt(e.value))\n      : (netAmount = netAmount - parseInt(e.value));\n    e.type === \"+\"\n      ? (netIncome = netIncome + parseInt(e.value))\n      : (netExpense = netExpense + parseInt(e.value));\n    return color;\n  }\n  function setColorForCons() {\n    let color = \"\";\n    netAmount >= 0 ? (color = \"green\") : (color = \"red\");\n    return color;\n  }\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-sm col-width\">\n          <div className=\"card\">\n            <InputFields click={handleClick}></InputFields>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\" className=\"of-x\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"left\">ID</TableCell>\n                    <TableCell align=\"left\">Description</TableCell>\n                    <TableCell align=\"left\">Expense/Returns</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {initialList.map((row, index) => (\n                    <TableRow key={row.id}>\n                      <TableCell align=\"left\">{row.id}</TableCell>\n                      <TableCell align=\"left\">{row.desc}</TableCell>\n                      <TableCell\n                        style={{ width: 20, color: `${setColor(row)}` }}\n                        align=\"left\"\n                      >\n                        {row.type}\n                        {row.value}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </div>\n        </div>\n        <div className=\"col-sm card-div-dim inline-comp\">\n          <ConsolidatedCards\n            color={setColorForCons()}\n            title=\"Budget\"\n            netAmount={netAmount}\n          ></ConsolidatedCards>\n          <ConsolidatedCards\n            color=\"red\"\n            title=\"Expense\"\n            netAmount={netExpense}\n          ></ConsolidatedCards>\n          <ConsolidatedCards\n            color=\"green\"\n            title=\"Income\"\n            netAmount={netIncome}\n          ></ConsolidatedCards>\n          <Chart\n            labels={labels}\n            colors={colors}\n            values={values}\n            title=\"Income\"\n          ></Chart>\n          <Chart\n            labels={labelsexpense}\n            colors={colorsexpense}\n            values={valuesexpense}\n            title=\"Expense\"\n          ></Chart>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ListExpense;\n","import React from \"react\";\nimport \"./App.css\";\nimport ListExpense from \"./components/ListExpense\";\n\nfunction App() {\n\n  return (\n    <div className=\"Login\">\n      <h1 className=\"App-header\">Expense Calculator</h1>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm column-attr-center\">\n            <ListExpense></ListExpense>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}